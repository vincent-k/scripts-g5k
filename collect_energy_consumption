#!/bin/bash

# Get parameters
NODE="$1"
RESULTS_DIR="$2"
mkdir -p "~/$RESULTS_DIR"

SCRIPT="collect_local_energy_consumption"
LOCAL_USER=$(whoami)
LOCAL_IP=$(ip a | grep inet | grep ' eth0' | awk '{print $2;}' | cut -d'/' -f1)

# Set ssh parameters
SSH_USER="root"
SSH_OPTS=' -o StrictHostKeyChecking=no -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o LogLevel=quiet '

function stop {
	if [ -f "$NODE" ]; then
		for N in `cat $NODE`; do
			PID=$(echo -e `ssh $SSH_OPTS $SSH_USER@$N "ps aux | grep $SCRIPT | grep -v grep | head -1"` | awk '{print $2;}')
			ssh $SSH_OPTS $SSH_USER@$N "kill -TERM $PID" >/dev/null &
		done
	else
		PID=$(echo -e `ssh $SSH_OPTS $SSH_USER@$NODE "ps aux | grep $SCRIPT | grep -v grep | head -1"` | awk '{print $2;}')
		ssh $SSH_OPTS $SSH_USER@$NODE "kill -TERM $PID" >/dev/null
	fi
}
trap stop SIGTERM SIGINT SIGKILL

# Send script to NODE(s)
if [ -f "$NODE" ]; then
	for N in `cat $NODE`; do
		scp $SSH_OPTS ./$SCRIPT $SSH_USER@$N: >/dev/null
	done
else
	scp $SSH_OPTS ./$SCRIPT $SSH_USER@$NODE: >/dev/null
fi

# Start the remote task in background
if [ -f "$NODE" ]; then
	for N in `cat $NODE`; do
		ssh $SSH_OPTS $SSH_USER@$N "nohup ~$SSH_USER/$SCRIPT $LOCAL_USER $LOCAL_IP $RESULTS_DIR/$N >/dev/null 2>&1 &"
	done
else
	ssh $SSH_OPTS $SSH_USER@$NODE "nohup ~$SSH_USER/$SCRIPT $LOCAL_USER $LOCAL_IP $RESULTS_DIR/$NODE >/dev/null 2>&1 &"
fi

# Wait for the results (end of workload)
if [ -f "$NODE" ]; then
	while [ $(ls -1 ~/$RESULTS_DIR/ | wc -l) -lt $(cat $NODE | wc -l) ]; do
		sleep 2
	done
else
	while [ ! -f "~/$RESULTS_DIR/$NODE" ]; do
		sleep 2
	done
fi
echo -e "Stopped energy consumption collect"
