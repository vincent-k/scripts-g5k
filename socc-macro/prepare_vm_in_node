#!/bin/bash

# Get parameters
VM_NAME="$1"
NODE="$2"
IP="$3"
IMG_DIR="$4"
CTL_NODE_NAME="$5"

BASE_IMG_TYPE="img"

# Set global parameters
SSH_USER='root'
SSH_OPTS=' -o StrictHostKeyChecking=no -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o LogLevel=quiet '
DOMAIN=`hostname | cut -d. -f2`.grid5000.fr

# Connect img to the system and mount it
## Backing img per VM
if ( ssh $SSH_USER@$NODE $SSH_OPTS ''[ -e $IMG_DIR/$VM_NAME.qcow2 ]'' ); then
	ssh $SSH_USER@$NODE $SSH_OPTS "qemu-nbd --connect=/dev/nbd0 $IMG_DIR/$VM_NAME.qcow2 >/dev/null"
	sleep 5
	ssh $SSH_USER@$NODE $SSH_OPTS "mount /dev/nbd0p1 /mnt"
## Raw img (vm local copies or single shared img)
else
	# Local copies
	if ( ssh $SSH_USER@$NODE $SSH_OPTS ''[ -e $IMG_DIR/$VM_NAME.img ]'' ); then	
		VM_IMG="$IMG_DIR/$VM_NAME.img"
	# Single shared img
	else
		VM_IMG=`ls -1 $IMG_DIR | grep $BASE_IMG_TYPE`
	fi

	ssh $SSH_USER@$NODE $SSH_OPTS "kpartx -a $VM_IMG >/dev/null"
	sleep 1
	ssh $SSH_USER@$NODE $SSH_OPTS "mount /dev/mapper/loop0p1 /mnt"
fi

# Create the network file
NET_CONF="auto lo\niface lo inet loopback\n\nauto eth0\niface eth0 inet static\naddress $IP\n"
NET_CONF+="$(g5k-subnets -a | awk '{ print "netmask "$3 "\nbroadcast "$2 "\ngateway "$4 }')"
ssh $SSH_USER@$NODE $SSH_OPTS "echo -e \"$NET_CONF\" > /mnt/etc/network/interfaces"

# Create resolv.conf file
RESOLV_CONF="domain $DOMAIN\nsearch $DOMAIN\n"
RESOLV_CONF+="$(g5k-subnets -a | awk '{ print "\nnameserver "$7 }')"
ssh $SSH_USER@$NODE $SSH_OPTS "echo -e \"$RESOLV_CONF\" > /mnt/etc/resolv.conf"

# Create a profile script to set proxy environment variables
PROXY_ENV="export http_proxy='http://$(host proxy | awk '{print $4;}'):3128'\n"
PROXY_ENV+="export https_proxy='http://$(host proxy | awk '{print $4;}'):3128'"
ssh $SSH_USER@$NODE $SSH_OPTS "echo -e \"$PROXY_ENV\" > /mnt/etc/profile.d/proxy.sh"

# Copy config files
ssh $SSH_USER@$NODE $SSH_OPTS "cp /etc/ssh/ssh_config /mnt/etc/ssh/"
ssh $SSH_USER@$NODE $SSH_OPTS "rm -rf /mnt/root/.ssh && cp -r /root/.ssh /mnt/root/"

# Send the rNotify python script and run it on boot
if [ -n $CTL_NODE_NAME ]; then
	scp $SSH_OPTS ./rNotify $SSH_USER@$NODE:/mnt/opt/ > /dev/null
	BOOT_FILE='#!/bin/sh\n\n'
	BOOT_FILE+="python /opt/rNotify $(host $CTL_NODE_NAME | awk '{print $4;}') $IP"
	ssh $SSH_USER@$NODE $SSH_OPTS "echo -e \"$BOOT_FILE\" > /mnt/etc/rc.local"
fi

# Unmount and disconnect partition
ssh $SSH_USER@$NODE $SSH_OPTS "sync && sudo umount /mnt"
## Qcow img type (.qcow2)
if ( ssh $SSH_USER@$NODE $SSH_OPTS ''[ -e $IMG_DIR/$VM_NAME.qcow2 ]'' ); then
	ssh $SSH_USER@$NODE $SSH_OPTS "qemu-nbd -d /dev/nbd0 >/dev/null"
## Raw img type (.img)
else
	ssh $SSH_USER@$NODE $SSH_OPTS "kpartx -d /dev/loop0 >/dev/null"
	ssh $SSH_USER@$NODE $SSH_OPTS "losetup -d /dev/loop0 >/dev/null"
fi
ssh $SSH_USER@$NODE $SSH_OPTS "sync"

echo -e " $VM_NAME in node $NODE DONE"
